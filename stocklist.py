# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI/stocklist.ui'
#
# Created by: PyQt5 UI code generator 5.10.1
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets, QtSql
import sql

class Ui_Stocks(object):
    def setupUi(self, Stocks):
        Stocks.setObjectName("Stocks")
        Stocks.resize(846, 573)
        Stocks.setMinimumSize(QtCore.QSize(0, 0))
        Stocks.setModal(True)
        self.gridLayout_2 = QtWidgets.QGridLayout(Stocks)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.viewStock = QtWidgets.QTableView(Stocks)
        self.viewStock.setMinimumSize(QtCore.QSize(0, 0))
        self.viewStock.setMaximumSize(QtCore.QSize(1850, 450))
        self.viewStock.setStyleSheet("border:2px solid #dcdcdc;")
        self.viewStock.setAlternatingRowColors(True)
        self.viewStock.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.viewStock.setGridStyle(QtCore.Qt.SolidLine)
        self.viewStock.setSortingEnabled(True)
        self.viewStock.setObjectName("viewStock")
        self.viewStock.horizontalHeader().setHighlightSections(True)
        self.viewStock.horizontalHeader().setMinimumSectionSize(140)
        self.gridLayout_2.addWidget(self.viewStock, 1, 0, 1, 1)
        self.groupBoxName = QtWidgets.QGroupBox(Stocks)
        self.groupBoxName.setObjectName("groupBoxName")
        self.gridLayout = QtWidgets.QGridLayout(self.groupBoxName)
        self.gridLayout.setObjectName("gridLayout")
        self.label = QtWidgets.QLabel(self.groupBoxName)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.groupBoxName)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 1, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.groupBoxName)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 0, 2, 1, 1)
        self.searchBySupplierName = QtWidgets.QLineEdit(self.groupBoxName)
        self.searchBySupplierName.setStyleSheet("height:25px;")
        self.searchBySupplierName.setObjectName("searchBySupplierName")
        self.gridLayout.addWidget(self.searchBySupplierName, 1, 0, 1, 1)
        self.searchByProductName = QtWidgets.QLineEdit(self.groupBoxName)
        self.searchByProductName.setStyleSheet("height:25px;")
        self.searchByProductName.setObjectName("searchByProductName")
        self.gridLayout.addWidget(self.searchByProductName, 1, 1, 1, 1)
        self.searchByCategory = QtWidgets.QLineEdit(self.groupBoxName)
        self.searchByCategory.setStyleSheet("min-height:25px;\n"
"min-width:220px;")
        self.searchByCategory.setObjectName("searchByCategory")
        self.gridLayout.addWidget(self.searchByCategory, 1, 2, 1, 1)
        self.gridLayout_2.addWidget(self.groupBoxName, 0, 0, 1, 1)
        self.btnClose = QtWidgets.QPushButton(Stocks)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btnClose.setFont(font)
        self.btnClose.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btnClose.setStyleSheet("max-width:91;")
        self.btnClose.setObjectName("btnClose")
        self.gridLayout_2.addWidget(self.btnClose, 2, 0, 1, 1)

        self.retranslateUi(Stocks)
        self.btnClose.clicked.connect(Stocks.close)
        sql.connectDB()
        q = QtSql.QSqlQuery()
        completer = QtWidgets.QCompleter()
        completer.setFilterMode(QtCore.Qt.MatchContains)
        completer.setCaseSensitivity(QtCore.Qt.CaseInsensitive)
        completer.setCompletionMode(QtWidgets.QCompleter.PopupCompletion)
        qry = QtSql.QSqlQuery()
        q.exec_("select product_name from products where quantity <= 0")
        m = QtSql.QSqlQueryModel()
        m.setQuery(q)
        completer.setModel(m)
        self.searchByProductName.setCompleter(completer)
        completor = QtWidgets.QCompleter()
        completor.setFilterMode(QtCore.Qt.MatchContains)
        completor.setCaseSensitivity(QtCore.Qt.CaseInsensitive)
        completor.setCompletionMode(QtWidgets.QCompleter.PopupCompletion)
        qry.exec_("select supplier from products where quantity <= 0")
        modl = QtSql.QSqlQueryModel()
        modl.setQuery(qry)
        completor.setModel(modl)
        self.searchBySupplierName.setCompleter(completor)
        complet = QtWidgets.QCompleter()
        complet.setFilterMode(QtCore.Qt.MatchContains)
        complet.setCaseSensitivity(QtCore.Qt.CaseInsensitive)
        complet.setCompletionMode(QtWidgets.QCompleter.PopupCompletion)
        qery = QtSql.QSqlQuery()
        qery.exec_("select product_category from products where quantity <= 0")
        modal = QtSql.QSqlQueryModel()
        modal.setQuery(qery)
        self.searchByCategory.setCompleter(complet)
        complet.setModel(modal)
        self.select_stock()
        self.searchByCategory.setUpdatesEnabled(True)
        self.searchByCategory.textChanged.connect(lambda: self.search_by_category())
        self.searchByProductName.textChanged.connect(lambda: self.search_by_product())
        self.searchBySupplierName.textChanged.connect(lambda: self.search_by_supplier())
        QtCore.QMetaObject.connectSlotsByName(Stocks)

    def retranslateUi(self, Stocks):
        _translate = QtCore.QCoreApplication.translate
        Stocks.setWindowTitle(_translate("Stocks", "Ahasaniya Enterprice - Out of Stock Products"))
        self.groupBoxName.setTitle(_translate("Stocks", "Search by:"))
        self.label.setText(_translate("Stocks", "Supplier Name:"))
        self.label_2.setText(_translate("Stocks", "Product Name:"))
        self.label_3.setText(_translate("Stocks", "Category:"))
        self.btnClose.setText(_translate("Stocks", "Close"))

    def select_stock(self):
        sql.connectDB()
        model = QtSql.QSqlQueryModel()
        query = QtSql.QSqlQuery()
        query.exec_("select * from products where quantity <= 0")
        model.setQuery(query)
        model.setHeaderData(0, QtCore.Qt.Horizontal, "ID")
        model.setHeaderData(1, QtCore.Qt.Horizontal, "Product Code")
        model.setHeaderData(2, QtCore.Qt.Horizontal, "Product Name")
        model.setHeaderData(3, QtCore.Qt.Horizontal, "Product Price")
        model.setHeaderData(4, QtCore.Qt.Horizontal, "Sale Price")
        model.setHeaderData(5, QtCore.Qt.Horizontal, "Total Price")
        model.setHeaderData(6, QtCore.Qt.Horizontal, "Quantity")
        model.setHeaderData(7, QtCore.Qt.Horizontal, "Category")
        model.setHeaderData(8, QtCore.Qt.Horizontal, "Date Added")
        model.setHeaderData(9, QtCore.Qt.Horizontal, "Supplier")
        self.viewStock.setModel(model)
        self.viewStock.horizontalHeader().setMinimumHeight(40)
        self.viewStock.horizontalHeader().setDefaultSectionSize(150)
        self.viewStock.setColumnHidden(0, True)
        self.viewStock.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
        self.viewStock.setShowGrid(True)
        self.viewStock.show()

    def search_by_category(self):

        data = self.searchByCategory.text()
        if not data == "" or not data.isspace():
            qry = QtSql.QSqlQuery()
            qry.prepare("select * from products where product_category = '{0}'".format(str(data)))
            # qry.bindValue(0, str(self.search.text()))
            if qry.exec_():
                model = QtSql.QSqlQueryModel()
                model.setQuery(qry)
                model.setHeaderData(0, QtCore.Qt.Horizontal, "ID")
                model.setHeaderData(1, QtCore.Qt.Horizontal, "Product Code")
                model.setHeaderData(2, QtCore.Qt.Horizontal, "Product Name")
                model.setHeaderData(3, QtCore.Qt.Horizontal, "Product Price")
                model.setHeaderData(4, QtCore.Qt.Horizontal, "Sale Price")
                model.setHeaderData(5, QtCore.Qt.Horizontal, "Total Price")
                model.setHeaderData(6, QtCore.Qt.Horizontal, "Quantity")
                model.setHeaderData(7, QtCore.Qt.Horizontal, "Category")
                model.setHeaderData(8, QtCore.Qt.Horizontal, "Date Added")
                model.setHeaderData(9, QtCore.Qt.Horizontal, "Supplier")
                self.viewStock.setModel(model)
                self.viewStock.horizontalHeader().setMinimumHeight(40)
                self.viewStock.horizontalHeader().setDefaultSectionSize(150)
                self.viewStock.setColumnHidden(0, True)
                self.viewStock.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
                self.viewStock.setShowGrid(True)

                self.viewStock.show()

    def search_by_product(self):

        data = self.searchByProductName.text()
        if not data == "" or not data.isspace():
            qry = QtSql.QSqlQuery()
            qry.prepare("select * from products where product_name = '{0}'".format(str(data)))
            # qry.bindValue(0, str(self.search.text()))
            if qry.exec_():
                model = QtSql.QSqlQueryModel()
                model.setQuery(qry)
                model.setHeaderData(0, QtCore.Qt.Horizontal, "ID")
                model.setHeaderData(1, QtCore.Qt.Horizontal, "Product Code")
                model.setHeaderData(2, QtCore.Qt.Horizontal, "Product Name")
                model.setHeaderData(3, QtCore.Qt.Horizontal, "Product Price")
                model.setHeaderData(4, QtCore.Qt.Horizontal, "Sale Price")
                model.setHeaderData(5, QtCore.Qt.Horizontal, "Total Price")
                model.setHeaderData(6, QtCore.Qt.Horizontal, "Quantity")
                model.setHeaderData(7, QtCore.Qt.Horizontal, "Category")
                model.setHeaderData(8, QtCore.Qt.Horizontal, "Date Added")
                model.setHeaderData(9, QtCore.Qt.Horizontal, "Supplier")
                self.viewStock.setModel(model)
                self.viewStock.horizontalHeader().setMinimumHeight(40)
                self.viewStock.horizontalHeader().setDefaultSectionSize(150)
                self.viewStock.setColumnHidden(0, True)
                self.viewStock.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
                self.viewStock.setShowGrid(True)

                self.viewStock.show()

    def search_by_supplier(self):

        data = self.searchBySupplierName.text()
        if not data == "" or not data.isspace():
            qry = QtSql.QSqlQuery()
            qry.prepare("select * from products where supplier = '{0}'".format(str(data)))
            # qry.bindValue(0, str(self.search.text()))
            if qry.exec_():
                model = QtSql.QSqlQueryModel()
                model.setQuery(qry)
                model.setHeaderData(0, QtCore.Qt.Horizontal, "ID")
                model.setHeaderData(1, QtCore.Qt.Horizontal, "Product Code")
                model.setHeaderData(2, QtCore.Qt.Horizontal, "Product Name")
                model.setHeaderData(3, QtCore.Qt.Horizontal, "Product Price")
                model.setHeaderData(4, QtCore.Qt.Horizontal, "Sale Price")
                model.setHeaderData(5, QtCore.Qt.Horizontal, "Total Price")
                model.setHeaderData(6, QtCore.Qt.Horizontal, "Quantity")
                model.setHeaderData(7, QtCore.Qt.Horizontal, "Category")
                model.setHeaderData(8, QtCore.Qt.Horizontal, "Date Added")
                model.setHeaderData(9, QtCore.Qt.Horizontal, "Supplier")
                self.viewStock.setModel(model)
                self.viewStock.horizontalHeader().setMinimumHeight(40)
                self.viewStock.horizontalHeader().setDefaultSectionSize(150)
                self.viewStock.setColumnHidden(0, True)
                self.viewStock.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
                self.viewStock.setShowGrid(True)

                self.viewStock.show()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Stocks = QtWidgets.QDialog()
    ui = Ui_Stocks()
    ui.setupUi(Stocks)
    Stocks.show()
    sys.exit(app.exec_())

